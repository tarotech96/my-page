{"ast":null,"code":"/**\n * Format date with given specific format\n * @param date\n * @param format\n * @return formatted date\n */\nfunction formatDateWithPadding(date, format) {\n  if (date) {\n    if (typeof date == \"string\") {\n      date = new Date(date);\n    }\n\n    format = format.replace(/yyyy/g, date.getFullYear());\n    format = format.replace(/MM/g, (\"0\" + (date.getMonth() + 1)).slice(-2));\n    format = format.replace(/dd/g, (\"0\" + date.getDate()).slice(-2));\n    format = format.replace(/HH/g, (\"0\" + date.getHours()).slice(-2));\n    format = format.replace(/mm/g, (\"0\" + date.getMinutes()).slice(-2));\n    format = format.replace(/ss/g, (\"0\" + date.getSeconds()).slice(-2));\n    format = format.replace(/SSS/g, (\"00\" + date.getMilliseconds()).slice(-3));\n  } else {\n    format = '';\n  }\n\n  return format;\n}\n/**\n * get week day from given year, month, day\n * @param year\n * @param month\n * @param day\n * @return desired week day\n */\n\n\nconst findWeekDay = (year, month, day) => {\n  var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  var weekDay = days[new Date(year, --month, day).getDay()];\n\n  switch (weekDay) {\n    case \"Sunday\":\n      return \"日\";\n\n    case \"Monday\":\n      return \"月\";\n\n    case \"Tuesday\":\n      return \"火\";\n\n    case \"Wednesday\":\n      return \"水\";\n\n    case \"Thursday\":\n      return \"木\";\n\n    case \"Friday\":\n      return \"金\";\n\n    case \"Saturday\":\n      return \"土\";\n\n    default:\n      return \"\";\n  }\n};\n/**\n * Get type of action\n * @param reduxAction sent action\n * @return type\n */\n\n\nconst getType = reduxAction => {\n  return reduxAction().type;\n};\n\nexport { formatDateWithPadding, findWeekDay, getType };","map":{"version":3,"sources":["/Users/nguyenvancong/Desktop/my-page/clients/src/constants/utilities.js"],"names":["formatDateWithPadding","date","format","Date","replace","getFullYear","getMonth","slice","getDate","getHours","getMinutes","getSeconds","getMilliseconds","findWeekDay","year","month","day","days","weekDay","getDay","getType","reduxAction","type"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,qBAAT,CAA+BC,IAA/B,EAAqCC,MAArC,EAA6C;AAC3C,MAAID,IAAJ,EAAU;AACR,QAAI,OAAOA,IAAP,IAAe,QAAnB,EAA6B;AAC3BA,MAAAA,IAAI,GAAG,IAAIE,IAAJ,CAASF,IAAT,CAAP;AACD;;AAEDC,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,OAAf,EAAwBH,IAAI,CAACI,WAAL,EAAxB,CAAT;AACAH,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,KAAf,EAAsB,CAAC,OAAOH,IAAI,CAACK,QAAL,KAAkB,CAAzB,CAAD,EAA8BC,KAA9B,CAAoC,CAAC,CAArC,CAAtB,CAAT;AACAL,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,KAAf,EAAsB,CAAC,MAAMH,IAAI,CAACO,OAAL,EAAP,EAAuBD,KAAvB,CAA6B,CAAC,CAA9B,CAAtB,CAAT;AACAL,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,KAAf,EAAsB,CAAC,MAAMH,IAAI,CAACQ,QAAL,EAAP,EAAwBF,KAAxB,CAA8B,CAAC,CAA/B,CAAtB,CAAT;AACAL,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,KAAf,EAAsB,CAAC,MAAMH,IAAI,CAACS,UAAL,EAAP,EAA0BH,KAA1B,CAAgC,CAAC,CAAjC,CAAtB,CAAT;AACAL,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,KAAf,EAAsB,CAAC,MAAMH,IAAI,CAACU,UAAL,EAAP,EAA0BJ,KAA1B,CAAgC,CAAC,CAAjC,CAAtB,CAAT;AACAL,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,MAAf,EAAuB,CAAC,OAAOH,IAAI,CAACW,eAAL,EAAR,EAAgCL,KAAhC,CAAsC,CAAC,CAAvC,CAAvB,CAAT;AACD,GAZD,MAYO;AACLL,IAAAA,MAAM,GAAG,EAAT;AACD;;AACD,SAAOA,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMW,WAAW,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,GAAd,KAAsB;AACxC,MAAIC,IAAI,GAAG,CACT,QADS,EAET,QAFS,EAGT,SAHS,EAIT,WAJS,EAKT,UALS,EAMT,QANS,EAOT,UAPS,CAAX;AASA,MAAIC,OAAO,GAAGD,IAAI,CAAC,IAAId,IAAJ,CAASW,IAAT,EAAe,EAAEC,KAAjB,EAAwBC,GAAxB,EAA6BG,MAA7B,EAAD,CAAlB;;AACA,UAAQD,OAAR;AACE,SAAK,QAAL;AACE,aAAO,GAAP;;AACF,SAAK,QAAL;AACE,aAAO,GAAP;;AACF,SAAK,SAAL;AACE,aAAO,GAAP;;AACF,SAAK,WAAL;AACE,aAAO,GAAP;;AACF,SAAK,UAAL;AACE,aAAO,GAAP;;AACF,SAAK,QAAL;AACE,aAAO,GAAP;;AACF,SAAK,UAAL;AACE,aAAO,GAAP;;AACF;AACE,aAAO,EAAP;AAhBJ;AAkBD,CA7BD;AA+BA;AACA;AACA;AACA;AACA;;;AACA,MAAME,OAAO,GAAIC,WAAD,IAAiB;AAC/B,SAAOA,WAAW,GAAGC,IAArB;AACD,CAFD;;AAIA,SAAStB,qBAAT,EAAgCa,WAAhC,EAA6CO,OAA7C","sourcesContent":["/**\n * Format date with given specific format\n * @param date\n * @param format\n * @return formatted date\n */\nfunction formatDateWithPadding(date, format) {\n  if (date) {\n    if (typeof date == \"string\") {\n      date = new Date(date)\n    }\n\n    format = format.replace(/yyyy/g, date.getFullYear())\n    format = format.replace(/MM/g, (\"0\" + (date.getMonth() + 1)).slice(-2))\n    format = format.replace(/dd/g, (\"0\" + date.getDate()).slice(-2))\n    format = format.replace(/HH/g, (\"0\" + date.getHours()).slice(-2))\n    format = format.replace(/mm/g, (\"0\" + date.getMinutes()).slice(-2))\n    format = format.replace(/ss/g, (\"0\" + date.getSeconds()).slice(-2))\n    format = format.replace(/SSS/g, (\"00\" + date.getMilliseconds()).slice(-3))\n  } else {\n    format = ''\n  }\n  return format\n}\n\n/**\n * get week day from given year, month, day\n * @param year\n * @param month\n * @param day\n * @return desired week day\n */\nconst findWeekDay = (year, month, day) => {\n  var days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n  ]\n  var weekDay = days[new Date(year, --month, day).getDay()]\n  switch (weekDay) {\n    case \"Sunday\":\n      return \"日\";\n    case \"Monday\":\n      return \"月\";\n    case \"Tuesday\":\n      return \"火\";\n    case \"Wednesday\":\n      return \"水\";\n    case \"Thursday\":\n      return \"木\";\n    case \"Friday\":\n      return \"金\";\n    case \"Saturday\":\n      return \"土\";\n    default:\n      return \"\";\n  }\n};\n\n/**\n * Get type of action\n * @param reduxAction sent action\n * @return type\n */\nconst getType = (reduxAction) => {\n  return reduxAction().type;\n};\n\nexport { formatDateWithPadding, findWeekDay, getType };\n"]},"metadata":{},"sourceType":"module"}