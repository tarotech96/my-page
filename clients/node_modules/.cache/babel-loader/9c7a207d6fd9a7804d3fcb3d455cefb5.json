{"ast":null,"code":"/**\n * Format date with given specific format\n * @param date\n * @param format\n * @return formatted date\n */function formatDateWithPadding(date,format){if(date){if(typeof date=='string'){date=new Date(date);}format=format.replace(/yyyy/g,date.getFullYear());format=format.replace(/MM/g,('0'+(date.getMonth()+1)).slice(-2));format=format.replace(/dd/g,('0'+date.getDate()).slice(-2));format=format.replace(/HH/g,('0'+date.getHours()).slice(-2));format=format.replace(/mm/g,('0'+date.getMinutes()).slice(-2));format=format.replace(/ss/g,('0'+date.getSeconds()).slice(-2));format=format.replace(/SSS/g,('00'+date.getMilliseconds()).slice(-3));}else{format='';}return format;}/**\n * get week day from given year, month, day\n * @param year\n * @param month\n * @param day\n * @return desired week day\n */var findWeekDay=function findWeekDay(year,month,day){var days=['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];var weekDay=days[new Date(year,--month,day).getDay()];switch(weekDay){case'Sunday':return'日';case'Monday':return'月';case'Tuesday':return'火';case'Wednesday':return'水';case'Thursday':return'木';case'Friday':return'金';case'Saturday':return'土';default:return'';}};/**\n * Get type of action\n * @param reduxAction sent action\n * @return type\n */var getType=function getType(reduxAction){return reduxAction().type;};export{formatDateWithPadding,findWeekDay,getType};","map":{"version":3,"sources":["/Users/nguyenvancong/Desktop/my-page/clients/src/constants/utilities.js"],"names":["formatDateWithPadding","date","format","Date","replace","getFullYear","getMonth","slice","getDate","getHours","getMinutes","getSeconds","getMilliseconds","findWeekDay","year","month","day","days","weekDay","getDay","getType","reduxAction","type"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,GACA,QAASA,CAAAA,qBAAT,CAA+BC,IAA/B,CAAqCC,MAArC,CAA6C,CAC3C,GAAID,IAAJ,CAAU,CACR,GAAI,MAAOA,CAAAA,IAAP,EAAe,QAAnB,CAA6B,CAC3BA,IAAI,CAAG,GAAIE,CAAAA,IAAJ,CAASF,IAAT,CAAP,CACD,CAEDC,MAAM,CAAGA,MAAM,CAACE,OAAP,CAAe,OAAf,CAAwBH,IAAI,CAACI,WAAL,EAAxB,CAAT,CACAH,MAAM,CAAGA,MAAM,CAACE,OAAP,CAAe,KAAf,CAAsB,CAAC,KAAOH,IAAI,CAACK,QAAL,GAAkB,CAAzB,CAAD,EAA8BC,KAA9B,CAAoC,CAAC,CAArC,CAAtB,CAAT,CACAL,MAAM,CAAGA,MAAM,CAACE,OAAP,CAAe,KAAf,CAAsB,CAAC,IAAMH,IAAI,CAACO,OAAL,EAAP,EAAuBD,KAAvB,CAA6B,CAAC,CAA9B,CAAtB,CAAT,CACAL,MAAM,CAAGA,MAAM,CAACE,OAAP,CAAe,KAAf,CAAsB,CAAC,IAAMH,IAAI,CAACQ,QAAL,EAAP,EAAwBF,KAAxB,CAA8B,CAAC,CAA/B,CAAtB,CAAT,CACAL,MAAM,CAAGA,MAAM,CAACE,OAAP,CAAe,KAAf,CAAsB,CAAC,IAAMH,IAAI,CAACS,UAAL,EAAP,EAA0BH,KAA1B,CAAgC,CAAC,CAAjC,CAAtB,CAAT,CACAL,MAAM,CAAGA,MAAM,CAACE,OAAP,CAAe,KAAf,CAAsB,CAAC,IAAMH,IAAI,CAACU,UAAL,EAAP,EAA0BJ,KAA1B,CAAgC,CAAC,CAAjC,CAAtB,CAAT,CACAL,MAAM,CAAGA,MAAM,CAACE,OAAP,CAAe,MAAf,CAAuB,CAAC,KAAOH,IAAI,CAACW,eAAL,EAAR,EAAgCL,KAAhC,CAAsC,CAAC,CAAvC,CAAvB,CAAT,CACD,CAZD,IAYO,CACLL,MAAM,CAAG,EAAT,CACD,CACD,MAAOA,CAAAA,MAAP,CACD,CAED;AACA;AACA;AACA;AACA;AACA;AACA,GACA,GAAMW,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,IAAD,CAAOC,KAAP,CAAcC,GAAd,CAAsB,CACxC,GAAIC,CAAAA,IAAI,CAAG,CAAC,QAAD,CAAW,QAAX,CAAqB,SAArB,CAAgC,WAAhC,CAA6C,UAA7C,CAAyD,QAAzD,CAAmE,UAAnE,CAAX,CACA,GAAIC,CAAAA,OAAO,CAAGD,IAAI,CAAC,GAAId,CAAAA,IAAJ,CAASW,IAAT,CAAe,EAAEC,KAAjB,CAAwBC,GAAxB,EAA6BG,MAA7B,EAAD,CAAlB,CACA,OAAQD,OAAR,EACE,IAAK,QAAL,CACE,MAAO,GAAP,CACF,IAAK,QAAL,CACE,MAAO,GAAP,CACF,IAAK,SAAL,CACE,MAAO,GAAP,CACF,IAAK,WAAL,CACE,MAAO,GAAP,CACF,IAAK,UAAL,CACE,MAAO,GAAP,CACF,IAAK,QAAL,CACE,MAAO,GAAP,CACF,IAAK,UAAL,CACE,MAAO,GAAP,CACF,QACE,MAAO,EAAP,CAhBJ,CAkBD,CArBD,CAuBA;AACA;AACA;AACA;AACA,GACA,GAAME,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,WAAD,CAAiB,CAC/B,MAAOA,CAAAA,WAAW,GAAGC,IAArB,CACD,CAFD,CAIA,OAAStB,qBAAT,CAAgCa,WAAhC,CAA6CO,OAA7C","sourcesContent":["/**\n * Format date with given specific format\n * @param date\n * @param format\n * @return formatted date\n */\nfunction formatDateWithPadding(date, format) {\n  if (date) {\n    if (typeof date == 'string') {\n      date = new Date(date)\n    }\n\n    format = format.replace(/yyyy/g, date.getFullYear())\n    format = format.replace(/MM/g, ('0' + (date.getMonth() + 1)).slice(-2))\n    format = format.replace(/dd/g, ('0' + date.getDate()).slice(-2))\n    format = format.replace(/HH/g, ('0' + date.getHours()).slice(-2))\n    format = format.replace(/mm/g, ('0' + date.getMinutes()).slice(-2))\n    format = format.replace(/ss/g, ('0' + date.getSeconds()).slice(-2))\n    format = format.replace(/SSS/g, ('00' + date.getMilliseconds()).slice(-3))\n  } else {\n    format = ''\n  }\n  return format\n}\n\n/**\n * get week day from given year, month, day\n * @param year\n * @param month\n * @param day\n * @return desired week day\n */\nconst findWeekDay = (year, month, day) => {\n  var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n  var weekDay = days[new Date(year, --month, day).getDay()]\n  switch (weekDay) {\n    case 'Sunday':\n      return '日'\n    case 'Monday':\n      return '月'\n    case 'Tuesday':\n      return '火'\n    case 'Wednesday':\n      return '水'\n    case 'Thursday':\n      return '木'\n    case 'Friday':\n      return '金'\n    case 'Saturday':\n      return '土'\n    default:\n      return ''\n  }\n}\n\n/**\n * Get type of action\n * @param reduxAction sent action\n * @return type\n */\nconst getType = (reduxAction) => {\n  return reduxAction().type\n}\n\nexport { formatDateWithPadding, findWeekDay, getType }\n"]},"metadata":{},"sourceType":"module"}