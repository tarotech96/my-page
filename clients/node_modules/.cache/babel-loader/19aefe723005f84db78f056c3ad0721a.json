{"ast":null,"code":"import { takeLatest, put, call, actionChannel, take, fork, delay } from \"redux-saga/effects\";\nimport * as actions from \"./../actions/postAction\";\nimport * as api from \"./../../api/api\";\n\nfunction* getPosts() {\n  try {\n    const res = yield call(api.getPosts);\n\n    if (res.data.length) {\n      yield put(actions.getPosts.getPostsSuccess(res.data));\n    }\n  } catch (error) {\n    yield put(actions.getPosts.getPostsFailure(error));\n  }\n}\n\nfunction* createPost(data) {\n  try {\n    const res = yield call(api.createPost(data));\n\n    if (res) {\n      yield put(actions.createPost.createPostSuccess(res.data));\n    }\n  } catch (error) {\n    yield put(actions.createPost.createPostFailure(error));\n  }\n}\n\nfunction* mySagas() {\n  // yield takeLatest(actions.getPosts.getPostsRequest, getPosts);\n  const requestGetPostsTask = yield actionChannel(actions.getPosts.getPostsRequest);\n  const requestCreatePostTask = yield actionChannel(actions.createPost.createPostRequest);\n\n  while (true) {\n    const payloadGetPosts = yield take(requestGetPostsTask);\n    const payloadCreatePost = yield take(requestCreatePostTask);\n    console.log(payloadGetPosts, payloadCreatePost);\n    yield fork(getPosts, payloadGetPosts);\n    yield fork(createPost, payloadCreatePost);\n    yield delay(1000);\n  } // yield takeLatest(actions.createPost.createPostRequest, createPost);\n\n}\n\nexport default mySagas;","map":{"version":3,"sources":["/Users/nguyenvancong/Desktop/my-page/clients/src/redux/sagas/index.js"],"names":["takeLatest","put","call","actionChannel","take","fork","delay","actions","api","getPosts","res","data","length","getPostsSuccess","error","getPostsFailure","createPost","createPostSuccess","createPostFailure","mySagas","requestGetPostsTask","getPostsRequest","requestCreatePostTask","createPostRequest","payloadGetPosts","payloadCreatePost","console","log"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,aAAhC,EAA+CC,IAA/C,EAAqDC,IAArD,EAA2DC,KAA3D,QAAwE,oBAAxE;AACA,OAAO,KAAKC,OAAZ,MAAyB,yBAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,iBAArB;;AAEA,UAAUC,QAAV,GAAqB;AACnB,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMR,IAAI,CAACM,GAAG,CAACC,QAAL,CAAtB;;AACA,QAAIC,GAAG,CAACC,IAAJ,CAASC,MAAb,EAAqB;AACnB,YAAMX,GAAG,CAACM,OAAO,CAACE,QAAR,CAAiBI,eAAjB,CAAiCH,GAAG,CAACC,IAArC,CAAD,CAAT;AACD;AACF,GALD,CAKE,OAAOG,KAAP,EAAc;AACd,UAAMb,GAAG,CAACM,OAAO,CAACE,QAAR,CAAiBM,eAAjB,CAAiCD,KAAjC,CAAD,CAAT;AACD;AACF;;AAED,UAAUE,UAAV,CAAqBL,IAArB,EAA2B;AACzB,MAAI;AACF,UAAMD,GAAG,GAAG,MAAMR,IAAI,CAACM,GAAG,CAACQ,UAAJ,CAAeL,IAAf,CAAD,CAAtB;;AACA,QAAID,GAAJ,EAAS;AACP,YAAMT,GAAG,CAACM,OAAO,CAACS,UAAR,CAAmBC,iBAAnB,CAAqCP,GAAG,CAACC,IAAzC,CAAD,CAAT;AACD;AACF,GALD,CAKE,OAAOG,KAAP,EAAc;AACd,UAAMb,GAAG,CAACM,OAAO,CAACS,UAAR,CAAmBE,iBAAnB,CAAqCJ,KAArC,CAAD,CAAT;AACD;AACF;;AAED,UAAUK,OAAV,GAAoB;AAClB;AACA,QAAMC,mBAAmB,GAAG,MAAMjB,aAAa,CAC7CI,OAAO,CAACE,QAAR,CAAiBY,eAD4B,CAA/C;AAGA,QAAMC,qBAAqB,GAAG,MAAMnB,aAAa,CAC/CI,OAAO,CAACS,UAAR,CAAmBO,iBAD4B,CAAjD;;AAGA,SAAO,IAAP,EAAa;AACX,UAAMC,eAAe,GAAG,MAAMpB,IAAI,CAACgB,mBAAD,CAAlC;AACA,UAAMK,iBAAiB,GAAG,MAAMrB,IAAI,CAACkB,qBAAD,CAApC;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYH,eAAZ,EAA6BC,iBAA7B;AACA,UAAMpB,IAAI,CAACI,QAAD,EAAWe,eAAX,CAAV;AACA,UAAMnB,IAAI,CAACW,UAAD,EAAaS,iBAAb,CAAV;AACA,UAAMnB,KAAK,CAAC,IAAD,CAAX;AACD,GAfiB,CAgBlB;;AACD;;AAED,eAAea,OAAf","sourcesContent":["import { takeLatest, put, call, actionChannel, take, fork, delay } from \"redux-saga/effects\";\nimport * as actions from \"./../actions/postAction\";\nimport * as api from \"./../../api/api\";\n\nfunction* getPosts() {\n  try {\n    const res = yield call(api.getPosts);\n    if (res.data.length) {\n      yield put(actions.getPosts.getPostsSuccess(res.data));\n    }\n  } catch (error) {\n    yield put(actions.getPosts.getPostsFailure(error));\n  }\n}\n\nfunction* createPost(data) {\n  try {\n    const res = yield call(api.createPost(data));\n    if (res) {\n      yield put(actions.createPost.createPostSuccess(res.data));\n    }\n  } catch (error) {\n    yield put(actions.createPost.createPostFailure(error));\n  }\n}\n\nfunction* mySagas() {\n  // yield takeLatest(actions.getPosts.getPostsRequest, getPosts);\n  const requestGetPostsTask = yield actionChannel(\n    actions.getPosts.getPostsRequest\n  );\n  const requestCreatePostTask = yield actionChannel(\n    actions.createPost.createPostRequest\n  );\n  while (true) {\n    const payloadGetPosts = yield take(requestGetPostsTask);\n    const payloadCreatePost = yield take(requestCreatePostTask);\n    console.log(payloadGetPosts, payloadCreatePost);\n    yield fork(getPosts, payloadGetPosts);\n    yield fork(createPost, payloadCreatePost);\n    yield delay(1000)\n  }\n  // yield takeLatest(actions.createPost.createPostRequest, createPost);\n}\n\nexport default mySagas;\n"]},"metadata":{},"sourceType":"module"}