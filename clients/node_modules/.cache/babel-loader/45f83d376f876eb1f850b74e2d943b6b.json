{"ast":null,"code":"var _jsxFileName = \"/Users/nguyenvancong/Desktop/my-page/clients/src/components/pages/blog/createPost/ModalCreatePost.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from \"react\";\nimport \"../Blog.css\";\nimport PropTypes from \"prop-types\";\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, TextareaAutosize } from \"@material-ui/core\";\nimport ImageUploader from \"react-images-upload\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { formatDateWithPadding } from \"constants/utilities\";\nimport { createPost, getPosts, closeModal } from \"redux/actions/postAction\"; // import {\n//   MuiPickersUtilsProvider,\n//   KeyboardDatePicker,\n// } from \"@material-ui/pickers\";\n// import DateFnsUtils from \"@date-io/date-fns\";\n// import localeJa from \"date-fns/locale/ja\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModalCreatePost.propTypes = {\n  isOpen: PropTypes.bool\n};\nModalCreatePost.defaultProps = {\n  isOPen: false\n};\n\nfunction ModalCreatePost({\n  isOpen\n}) {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    isSucceeded\n  } = useSelector(state => state.createNewPost);\n  const [data, setData] = useState({\n    title: \"\",\n    author: \"\",\n    body: \"\",\n    image: \"\",\n    createdAt: \"\"\n  }); // const [selectedDate, setSelectedDate] = useState(\"\");\n\n  const onSubmitForm = useCallback(() => {\n    dispatch(createPost.createPostRequest({ ...data,\n      createdAt: formatDateWithPadding(new Date(), \"yyyy-MM-dd\")\n    }));\n\n    if (isSucceeded) {\n      dispatch(closeModal());\n      dispatch(getPosts.getPostsRequest());\n    }\n  }, [data, dispatch, isSucceeded]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-form\",\n    children: /*#__PURE__*/_jsxDEV(Dialog, {\n      open: isOpen,\n      onClose: () => dispatch(closeModal()),\n      disableBackdropClick: true,\n      \"aria-labelledby\": \"alert-dialog-title\",\n      \"aria-describedby\": \"alert-dialog-description\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"alert-dialog-title\",\n        children: \"Add new post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          noValidate: true,\n          autoComplete: \"off\",\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            id: \"standard-basic\",\n            label: \"Title\",\n            style: {\n              marginBottom: 10\n            },\n            onChange: e => setData({ ...data,\n              title: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            id: \"filled-basic\",\n            label: \"Author\",\n            style: {\n              marginBottom: 10\n            },\n            onChange: e => setData({ ...data,\n              author: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n            rowsMin: 5,\n            rowsMax: 100,\n            label: \"Body\",\n            placeholder: \"Enter body...\",\n            style: {\n              marginBottom: 10\n            },\n            onChange: e => setData({ ...data,\n              body: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ImageUploader, {\n            withIcon: true,\n            buttonText: \"Choose images\",\n            onChange: (files, imgUrls) => setData({ ...data,\n              image: imgUrls[0]\n            }),\n            imgExtension: [\".jpg\", \".gif\", \".png\", \".gif\", \".jpeg\"],\n            maxFileSize: 5242880\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => dispatch(closeModal()),\n          color: \"primary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: onSubmitForm,\n          color: \"primary\",\n          autoFocus: true,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ModalCreatePost, \"ldT/jYj1u+Gl4gVKd4XIyqYHFjE=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ModalCreatePost;\nexport default ModalCreatePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalCreatePost\");","map":{"version":3,"sources":["/Users/nguyenvancong/Desktop/my-page/clients/src/components/pages/blog/createPost/ModalCreatePost.jsx"],"names":["React","useState","useCallback","PropTypes","Dialog","DialogTitle","DialogContent","DialogActions","Button","TextField","TextareaAutosize","ImageUploader","useDispatch","useSelector","formatDateWithPadding","createPost","getPosts","closeModal","ModalCreatePost","propTypes","isOpen","bool","defaultProps","isOPen","dispatch","isSucceeded","state","createNewPost","data","setData","title","author","body","image","createdAt","onSubmitForm","createPostRequest","Date","getPostsRequest","display","flexDirection","marginBottom","e","target","value","files","imgUrls"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport \"../Blog.css\";\nimport PropTypes from \"prop-types\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  TextareaAutosize,\n} from \"@material-ui/core\";\nimport ImageUploader from \"react-images-upload\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { formatDateWithPadding } from \"constants/utilities\";\nimport { createPost, getPosts, closeModal } from \"redux/actions/postAction\";\n// import {\n//   MuiPickersUtilsProvider,\n//   KeyboardDatePicker,\n// } from \"@material-ui/pickers\";\n// import DateFnsUtils from \"@date-io/date-fns\";\n// import localeJa from \"date-fns/locale/ja\";\n\nModalCreatePost.propTypes = {\n  isOpen: PropTypes.bool,\n};\n\nModalCreatePost.defaultProps = {\n  isOPen: false,\n};\n\nfunction ModalCreatePost({ isOpen }) {\n  const dispatch = useDispatch();\n  const { isSucceeded } = useSelector((state) => state.createNewPost);\n\n  const [data, setData] = useState({\n    title: \"\",\n    author: \"\",\n    body: \"\",\n    image: \"\",\n    createdAt: \"\",\n  });\n  // const [selectedDate, setSelectedDate] = useState(\"\");\n\n  const onSubmitForm = useCallback(() => {\n    dispatch(\n      createPost.createPostRequest({\n        ...data,\n        createdAt: formatDateWithPadding(new Date(), \"yyyy-MM-dd\"),\n      })\n    );\n\n    if (isSucceeded) {\n      dispatch(closeModal());\n      dispatch(getPosts.getPostsRequest());\n    }\n  }, [data, dispatch, isSucceeded]);\n\n  return (\n    <div className=\"create-form\">\n      <Dialog\n        open={isOpen}\n        onClose={() => dispatch(closeModal())}\n        disableBackdropClick\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">Add new post</DialogTitle>\n        <DialogContent>\n          <form\n            noValidate\n            autoComplete=\"off\"\n            style={{ display: \"flex\", flexDirection: \"column\" }}\n          >\n            <TextField\n              id=\"standard-basic\"\n              label=\"Title\"\n              style={{ marginBottom: 10 }}\n              onChange={(e) => setData({ ...data, title: e.target.value })}\n            />\n            <TextField\n              id=\"filled-basic\"\n              label=\"Author\"\n              style={{ marginBottom: 10 }}\n              onChange={(e) => setData({ ...data, author: e.target.value })}\n            />\n            <TextareaAutosize\n              rowsMin={5}\n              rowsMax={100}\n              label=\"Body\"\n              placeholder=\"Enter body...\"\n              style={{ marginBottom: 10 }}\n              onChange={(e) => setData({ ...data, body: e.target.value })}\n            />\n            <ImageUploader\n              withIcon={true}\n              buttonText=\"Choose images\"\n              onChange={(files, imgUrls) =>\n                setData({ ...data, image: imgUrls[0] })\n              }\n              imgExtension={[\".jpg\", \".gif\", \".png\", \".gif\", \".jpeg\"]}\n              maxFileSize={5242880}\n            />\n            {/* <MuiPickersUtilsProvider locale={localeJa} utils={CustomDateUtils}>\n              <KeyboardDatePicker\n                margin=\"normal\"\n                label=\"CreatedAt\"\n                format=\"yyyy-MM-dd\"\n                value={selectedDate}\n                onChange={(date) => setSelectedDate(date)}\n                KeyboardButtonProps={{\n                  \"aria-label\": \"change date\",\n                }}\n              />\n            </MuiPickersUtilsProvider>  */}\n          </form>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => dispatch(closeModal())} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={onSubmitForm} color=\"primary\" autoFocus>\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default ModalCreatePost;\n"]},"metadata":{},"sourceType":"module"}